name: Build and Deploy Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build_windows:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    # - name: Check GitHub Token Permissions  # Debugging step
    #   run: gh auth status
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}

    - name: Check if GITHUB_TOKEN is set
      run: echo "GITHUB_TOKEN is ${{ secrets.GITHUB_TOKEN  }}"

    - name: Install dependencies
      run: npm install

    - name: Build Electron app
      run: npm run electron:package:win
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}

    - name: List dist directory
      run: Get-ChildItem -Path ./dist

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset (Setup EXE)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/MedlabX-Setup-${{ github.ref_name }}.exe
        asset_name: MedlabX-Setup-${{ github.ref_name }}.exe
        asset_content_type: application/x-msdownload
    
    - name: Upload Release Asset (Latest YAML)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/latest.yml
        asset_name: latest.yml
        asset_content_type: application/x-yaml

    - name: Upload Release Asset (Blockmap)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/MedlabX-Setup-${{ github.ref_name }}.exe.blockmap
        asset_name: MedlabX-Setup-${{ github.ref_name }}.exe.blockmap
        asset_content_type: application/octet-stream

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}  

  build_macos:
    runs-on: macos-latest
    needs: build_windows

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Install macOS Dependencies
      run: |
        brew install python3 create-dmg
        brew install python-setuptools
        sudo ln -sfn $(which python3) /usr/local/bin/python
        export PATH="/usr/local/bin:$PATH"
        python --version  
        python3 -m venv venv
        source venv/bin/activate
        python3 -m ensurepip
        python3 -m pip install setuptools wheel
        sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
        sudo xcodebuild -license accept

    - name: Set Python Path for node-gyp
      run: |
        export PYTHON=$(which python3)
        echo "Using Python: $PYTHON"
        echo "PYTHON=$PYTHON" >> $GITHUB_ENV

    - name: Decode Apple Signing Certificate
      env:
        APPLE_CERTIFICATE: ${{ secrets.CERTIFICATE_P12 }}
      run: echo "$APPLE_CERTIFICATE" | base64 -d > apple_certificate.p12

    - name: Install Certificate in Keychain
      env: 
        APPLE_SECRET: ${{secrets.CERTIFICATE_PASSWORD}}
      run: |
        security create-keychain -p "" build.keychain
        security import apple_certificate.p12 -k build.keychain -P "$APPLE_SECRET" -T /usr/bin/codesign
        security list-keychains -d user -s build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
  
    - name: Rebuild Node Modules for Electron
      run: npm rebuild node-gyp --verbose

    - name: Install Dependencies
      run: npm install --force

    - name: Rebuild Node Modules for Electron
      run: npm rebuild node-gyp        

    - name: Set Python Path for Electron Builder
      run: |
        echo "PYTHON=$(which python3)" >> $GITHUB_ENV

    - name: Force `dmg-builder` to Use Python 3
      run: |
        export PYTHON=$(which python3)
        echo "PYTHON=$PYTHON" >> $GITHUB_ENV

    - name: Build Electron app for macOS
      run: npm run electron:package:mac
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}

    - name: Verify .app Bundle Exists
      run: |
        if [ ! -d "dist/mac-arm64/XSpec.app" ]; then
          echo "ERROR: .app bundle not found!"
          exit 1
        fi


    - name: Package macOS App Using `hdiutil`
      run: |
        mkdir -p dist/dmg
        hdiutil create -volname "XSpec Installer" \
          -srcfolder "dist/mac-arm64/XSpec.app" \
          -ov -format UDZO "dist/dmg/XSpec-Installer.dmg"
  

    - name: Debug - Output passed upload_url
      run: |
        echo "Passed upload URL: ${{ needs.build_windows.outputs.upload_url }}"  # Debugging output

    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}
      with:
        upload_url: ${{ needs.build_windows.outputs.upload_url }}
        asset_path: ./dist/dmg/XSpec-Installer.dmg
        asset_name: XSpec-Setup-${{ github.ref_name }}.dmg
        asset_content_type: application/x-apple-diskimage

  build_linux:
      runs-on: ubuntu-latest
      needs: build_windows

      steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm install

      - name: Build Electron app for Linux (.deb)
        run: npm run electron:package:linux
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}

      - name: List dist directory
        run: ls -al ./dist

      - name: Upload Linux Release Asset (.deb)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}
        with:
          upload_url: ${{ needs.build_windows.outputs.upload_url }}
          asset_path: ./dist/medlabx_${{ github.ref_name }}_amd64.deb
          asset_name: MedlabX-Setup-${{ github.ref_name }}.deb
          asset_content_type: application/vnd.debian.binary-package